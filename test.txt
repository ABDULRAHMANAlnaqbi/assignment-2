# Test script for the hotel management system classes
from datetime import datetime

# Testing the User class
user1 = User(1, "John Doe", "johndoe@example.com", "johndoe", "password123", "Guest")
user2 = User(2, "Jane Smith", "janesmith@example.com", "janesmith", "mypassword", "Admin")

# Test login (two examples)
assert user1.login("johndoe", "password123") is True, "Login should succeed with correct credentials"
assert user1.login("johndoe", "wrongpassword") is False, "Login should fail with incorrect credentials"
assert user2.login("janesmith", "mypassword") is True, "Login should succeed for Admin user"

# Test profile update (two examples)
user1.update_profile({"name": "John Updated", "contact_info": "newemail@example.com"})
assert user1.get_account_details()["name"] == "John Updated", "Profile update failed"
user2.update_profile({"name": "Jane Updated", "contact_info": "janeupdated@example.com"})
assert user2.get_account_details()["name"] == "Jane Updated", "Profile update failed"

# Test password reset (two examples)
assert user1.reset_password("newpassword") is True, "Password reset failed"
assert user2.reset_password("newadminpassword") is True, "Password reset failed"

# Test booking history retrieval (two examples)
assert len(user1.check_booking_history()) > 0, "Booking history should not be empty"
assert len(user2.check_booking_history()) > 0, "Booking history should not be empty"

# Testing the Room class
room1 = Room(101, "Deluxe", ["Wi-Fi", "TV"], 150.0, True)
room2 = Room(102, "Suite", ["Wi-Fi", "TV", "Jacuzzi"], 300.0, True)

# Test room availability (two examples)
assert room1.check_availability() is True, "Room 101 should be available"
room1.update_status(False)
assert room1.check_availability() is False, "Room 101 should not be available after update"
assert room2.check_availability() is True, "Room 102 should be available"

# Test room price and discount (two examples)
assert room1.get_price() == 150.0, "Price mismatch"
assert room1.calculate_discounted_price(10) == 135.0, "Discounted price calculation failed"
assert room2.calculate_discounted_price(20) == 240.0, "Discounted price calculation failed"

# Test amenities (two examples)
room1.add_amenity("Air Conditioner")
assert "Air Conditioner" in room1.get_room_info()["amenities"], "Amenity addition failed"
room1.remove_amenity("Wi-Fi")
assert "Wi-Fi" not in room1.get_room_info()["amenities"], "Amenity removal failed"

room2.add_amenity("Mini-Bar")
assert "Mini-Bar" in room2.get_room_info()["amenities"], "Amenity addition failed"
room2.remove_amenity("Jacuzzi")
assert "Jacuzzi" not in room2.get_room_info()["amenities"], "Amenity removal failed"

# Testing the Guest class
guest1 = Guest(1, "Alice Brown", "alice@example.com")
guest2 = Guest(2, "Bob Green", "bob@example.com")

guest1.join_loyalty_program()
assert guest1.view_loyalty_points() == 50, "Initial loyalty points should be 50"
assert guest1.redeem_loyalty_points(20) is True, "Loyalty point redemption failed"
assert guest1.redeem_loyalty_points(100) is False, "Redemption should fail due to insufficient points"

guest2.join_loyalty_program()
assert guest2.view_loyalty_points() == 50, "Initial loyalty points should be 50"

# Helper function for validating dates
def validate_booking_dates(check_in, check_out):
    date_format = "%Y-%m-%d"
    check_in_date = datetime.strptime(check_in, date_format)
    check_out_date = datetime.strptime(check_out, date_format)
    if check_out_date <= check_in_date:
        raise ValueError("Checkout date must be after check-in date")

# Testing Booking class
validate_booking_dates("2025-03-01", "2025-03-05")
booking1 = Booking(1, guest1, room1, "2025-03-01", "2025-03-05")
booking1.confirm_booking()

# Booking cancellation tests explicitly
booking1.cancel_booking()
assert booking1.get_status() == "Cancelled", "Booking cancellation failed"
room1.update_status(True)
assert room1.check_availability() is True, "Room availability not restored after cancellation"

# Negative date test clearly handled
try:
    validate_booking_dates("2025-03-10", "2025-03-05")
except ValueError as e:
    print(f"Handled exception for invalid dates: {e}")

# Testing Payment class
payment1 = Payment(1, booking1, 600.0, "Credit Card")
assert payment1.process_payment() is True, "Payment processing failed"

# Negative payment amount explicitly tested
payment_negative = Payment(2, booking1, -50.0, "Credit Card")
assert not payment_negative.validate_payment_details(), "Negative payment amount validation failed"

# Payment class advanced features (split payments)
payment_split = Payment(3, booking1, 600.0, "Split")
payment_split.split_payment(["Credit Card", "Debit Card"], [300.0, 300.0])
assert payment_split.get_payment_method() == "Credit Card, Debit Card", "Split payment failed"

print("All tests passed!")
